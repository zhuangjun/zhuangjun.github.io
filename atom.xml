<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小丹丹的程序博客]]></title>
  <link href="http://zhuangjun.github.io/atom.xml" rel="self"/>
  <link href="http://zhuangjun.github.io/"/>
  <updated>2014-09-27T21:42:44+08:00</updated>
  <id>http://zhuangjun.github.io/</id>
  <author>
    <name><![CDATA[Daniel Zhuang]]></name>
    <email><![CDATA[suda.water@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dapper Emit]]></title>
    <link href="http://zhuangjun.github.io/blog/2014/09/27/dapper-emit/"/>
    <updated>2014-09-27T20:49:41+08:00</updated>
    <id>http://zhuangjun.github.io/blog/2014/09/27/dapper-emit</id>
    <content type="html"><![CDATA[<p>Dapper的github说明中说Dapper基于Emit，所以性能很高。 今天对这块稍微做了一下研究。</p>

<h4>什么是Emit</h4>

<p>Emit是.NET中可以在运行时动态产生IL代码的一种技术。</p>

<p>Emit通过这些步骤来动态产生一个类或者方法</p>

<ul>
<li>创建一个新的程序集（程序集是动态的存在于内存中或把它们保存到磁盘上）。</li>
<li>在程序集内部，创建一个模块（module）。</li>
<li>在模块内部，创建一个类型。</li>
<li>给类型添加属性和方法。</li>
<li>产生属性和方法内部的代码</li>
</ul>


<p>更多的Emit简单的介绍可以参考<a href="http://www.cnblogs.com/cuihongyu3503319/archive/2009/12/01/1614298.html">这里</a></p>

<p>Emit有点像Ruby中的元编程。 不过Emit是基于IL的， 写起来有点痛苦， 当然， 执行效率会很高。</p>

<h4>Dapper query 的实现</h4>

<ol>
<li>根据query的CommandText，CommandType，return Type等生成一个Identity对象</li>
<li>检查是否存在这个Identity对应的CacheInfo， 主要是IDbReader到Type的Deserializer</li>
<li>如果不存在，通过Emit生成一个DynamicMethod. 首先拿到这个Type的ITypeMap. DefaultTypeMap是默认IDataReader里的字段和Type的PropertyName一致的。这里可以自定义TypeMap， 给Property通过Attribute来map到不同的Db column name。通过便利这些字段的mapping列表， 生成IDataReader中的column到Type property的赋值。</li>
</ol>


<p>然后将DynamicMethod.CreateDelegate Cache起来。</p>

<p>所以Dapper的性能是很高的， 自定义的TypeMap也只会在没有cache的情况下执行一次， 所以不会有性能问题。</p>

<p>和Emit相关的主要代码在这里：</p>

<p><a href="https://github.com/StackExchange/dapper-dot-net/blob/master/Dapper%20NET40/SqlMapper.cs#L2144">GetDeserializer</a></p>

<p><a href="https://github.com/StackExchange/dapper-dot-net/blob/master/Dapper%20NET40/SqlMapper.cs#L3490">GetTypeDeserializer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Used ORMs in Dot Net]]></title>
    <link href="http://zhuangjun.github.io/blog/2014/09/26/common-used-orms-in-dot-net/"/>
    <updated>2014-09-26T22:19:02+08:00</updated>
    <id>http://zhuangjun.github.io/blog/2014/09/26/common-used-orms-in-dot-net</id>
    <content type="html"><![CDATA[<p>ORM框架是web开发中不可缺少的，可以很方便的完成数据库对象到实体对象的mapping。最近研究了.NET里面常用的几个ORM框架，这里对他们进行一个简单的总结。</p>

<h4>先来介绍几款轻量级的ORM</h4>

<ul>
<li><h4>Dapper</h4></li>
<li><h4>PetaPoco</h4></li>
<li><h4>Massive</h4></li>
</ul>


<h2>Dapper</h2>

<p>Github 地址: <a href="https://github.com/StackExchange/dapper-dot-net">https://github.com/StackExchange/dapper-dot-net</a></p>

<p>Dapper是个人在这几个轻量级ORM中最喜欢的一个。因为项目里面大量使用SP， dapper是这三个里面原生就支持SP的。Dapper基于Emit进行对象的mapping， 性能上也非常的不错。 它的github上有和其他ORM相比的详细的介绍。</p>

<p>Dapper的API很简单，主要的API和sample如下：</p>

<ul>
<li>Execute a query and map the results to a strongly typed List</li>
</ul>


<pre><code>
var dog = connection.Query<Dog>("select Age = @Age, Id = @Id", new { Age = (int?)null, Id = guid });
</code></pre>


<ul>
<li>Execute a query and map it to a list of dynamic objects</li>
</ul>


<pre><code>
var rows = connection.Query("select 1 A, 2 B union all select 3, 4");
</code></pre>


<ul>
<li>Multi Mapping</li>
</ul>


<pre><code>
var data = connection.Query<Post, User, Post>(sql, (post, user) => { post.Owner = user; return post;});
</code></pre>


<ul>
<li>Multiple Results</li>
</ul>


<pre><code>
    var sql = 
@"
select * from Customers where CustomerId = @id
select * from Orders where CustomerId = @id
select * from Returns where CustomerId = @id";

using (var multi = connection.QueryMultiple(sql, new {id=selectedId}))
{
   var customer = multi.Read<Customer>().Single();
   var orders = multi.Read<Order>().ToList();
   var returns = multi.Read<Return>().ToList();
   ...
} 
</code></pre>


<ul>
<li>Execute a Command</li>
</ul>


<p>使用Dapper的时候建议数据库中select出来的对象名称和Model定义的名字一样。</p>

<p>官方没有给出方案来自定义数据库字段和代码中Model字段不一致时候的mapping方法，如果确实需要， 可以参考github上有人写的自定义的mapper</p>

<p><a href="https://gist.github.com/kalebpederson/5460509">https://gist.github.com/kalebpederson/5460509</a></p>

<p>给你的Model属性加上ColumnMapping(&ldquo;XX&rdquo;)的attribute， 然后再query的代码中指定使用自定义mapper</p>

<pre><code>
public static IEnumerable<MyArea> LoadWithCustomMapping()
{
    using (var conn = OpenDBConnection())
    {
        Dapper.SqlMapper.SetTypeMap(typeof(MyArea), new ColumnAttributeTypeMapper<MyArea>());
        return conn.Query<MyArea>("SELECT TOP 10 CAID,CAName,En FROM CityArea");
    }
}
</code></pre>


<h3>Dapper 的CRUD</h3>

<p>Dapper 官方提供了Dapper.Contrib 和 Dapper.Rainbow 来直接对某一个强类型对象进行CRUD操作。</p>

<p>但是由于Dapper.Contrib 没有 GetAll()的方法， Dapper.Rainbow 在做Update和Delete的时候， 数据库的table主键名必须为Id，对于已经建好的数据库， 就没法使用了。</p>

<p>这里推荐另一个package， Dapper.SimpleCRUD， 可以通过attribute来设定Model对应的表名和主键名。</p>

<p>Dapper.SimpleCRUD的地址： <a href="https://github.com/ericdc1/Dapper.SimpleCRUD/">https://github.com/ericdc1/Dapper.SimpleCRUD/</a></p>

<h2>PetaPoco</h2>

<pre><code>To be added
</code></pre>

<h2>Massive</h2>

<pre><code>To be added
</code></pre>

<p><br/></p>

<h4>企业级的ORM</h4>

<ul>
<li>EntityFramework</li>
<li>NHibernate</li>
</ul>


<h2>EntityFramework</h2>

<h2>NHibernate</h2>
]]></content>
  </entry>
  
</feed>
